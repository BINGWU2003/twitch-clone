generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fulltextIndex", "fulltextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  imageUrl       String   @db.Text
  externalUserId String   @unique
  bio            String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  following      Follow[] @relation("Following")
  followedBy     Follow[] @relation("FollowedBy")
  blocking       Block[]  @relation("Blocking")
  blockedBy      Block[]  @relation("BlockedBy")
  stream         Stream?
}

model Follow {
  id          String   @id @default(uuid())
  // 订阅者的id
  followerId  String
  // 被订阅者的id
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String   @id @default(uuid())
  // 阻止者的id
  blockerId String
  // 被阻止者的id
  blockedId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blocker   User     @relation("Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked   User     @relation("BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Stream {
  id                  String  @id @default(uuid())
  name                String  @db.Text
  thumbnailUrl        String? @db.Text
  ingressId           String? @unique
  serverUrl           String? @db.Text
  streamKey           String? @db.Text
  isAlive             Boolean @default(false)
  isChatEnable        Boolean @default(true)
  isChatDelay         Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)
  userId              String  @unique
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])
  @@fulltext([name])
}
